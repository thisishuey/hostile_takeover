// Generated by CoffeeScript 1.7.1
var actions, cardPositions, cards, currentAction, debug, name, pageTitleNotification, selfIndex, _base, _base1, _base2;

debug = false;

name = '';

selfIndex = -1;

currentAction = false;

actions = {
  paycheck: {
    title: 'Paycheck',
    text: 'takes <strong class="text-success">Paycheck</strong>'
  },
  bonus: {
    title: 'Bonus',
    text: 'takes <strong class="text-success">Bonus</strong>'
  },
  downsize: {
    title: 'Downsize',
    target: true,
    text: 'performs <strong class="text-success">Downsize</strong> on'
  },
  dividends: {
    title: 'Dividends',
    text: 'takes <strong class="text-success">Dividends</strong>'
  },
  block_bonus: {
    title: 'Block Bonus',
    target: true,
    text: 'blocks <strong class="text-danger">Bonus</strong> on'
  },
  steal: {
    title: 'Steal',
    target: true,
    text: '<strong class="text-success">Steals</strong> from'
  },
  block_steal_one_upper: {
    title: 'Block Steal (One-Upper)',
    target: true,
    text: '<strong class="text-danger">Blocks Steal (One-Upper)</strong> from'
  },
  exchange: {
    title: 'Exchange',
    text: '<strong class="text-success">Exchanges</strong> cards'
  },
  block_steal_vp: {
    title: 'Block Steal (VP)',
    target: true,
    text: '<strong class="text-danger">Blocks Steal (VP)</strong> from'
  },
  fire: {
    title: 'Fire',
    target: true,
    text: '<strong class="text-success">Fires</strong>'
  },
  block_fire: {
    title: 'Block Fire',
    target: true,
    text: '<strong class="text-danger">Blocks Fire</strong> from'
  },
  report_credibility: {
    title: 'Report Credibility',
    credibility: true,
    text: 'now has'
  },
  call_bluff: {
    title: 'Call Bluff',
    target: true,
    text: '<strong class="text-success">Calls Bluff</strong> on'
  },
  bluffed_cfo: {
    title: 'Bluffed CFO',
    text: '<strong class="text-danger">Bluffed CFO</strong>'
  },
  bluffed_one_upper: {
    title: 'Bluffed One-Upper',
    text: '<strong class="text-danger">Bluffed One-Upper</strong>'
  },
  bluffed_vp: {
    title: 'Bluffed VP',
    text: '<strong class="text-danger">Bluffed VP</strong>'
  },
  bluffed_manager: {
    title: 'Bluffed Manager',
    text: '<strong class="text-danger">Bluffed Manager</strong>'
  },
  bluffed_hr: {
    title: 'Bluffed HR',
    text: '<strong class="text-danger">Bluffed HR</strong>'
  },
  resign: {
    title: 'Resign',
    text: 'has <strong class="text-danger">Resigned</strong>'
  },
  hostile_takeover: {
    title: 'Hostile Takeover',
    text: '<strong class="text-success">WON HOSTILE TAKEOVER!!!</strong>'
  }
};

cardPositions = ['first card', 'second card'];

cards = {
  down: {
    title: 'Face Down',
    src: '/images/card_face_down.png'
  },
  cfo: {
    title: 'CFO',
    src: '/images/card_cfo.png'
  },
  '1up': {
    title: 'One-Upper',
    src: '/images/card_one_upper.png'
  },
  vp: {
    title: 'VP',
    src: '/images/card_vp.png'
  },
  man: {
    title: 'Manager',
    src: '/images/card_manager.png'
  },
  hr: {
    title: 'HR',
    src: '/images/card_hr.png'
  },
  blank: {
    title: 'Blank',
    src: '/images/card_blank.png'
  }
};

if ((_base = String.prototype).startsWith == null) {
  _base.startsWith = function(string) {
    return this.slice(0, string.length) === string;
  };
}

if ((_base1 = String.prototype).htmlEntities == null) {
  _base1.htmlEntities = function() {
    return String(this).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };
}

if ((_base2 = String.prototype).stripTags == null) {
  _base2.stripTags = function() {
    return String(string).replace(/(<([^>]+)>)/ig, '');
  };
}

pageTitleNotification = {
  vars: {
    originalTitle: document.title,
    interval: null
  },
  on: function(notification, intervalSpeed) {
    var that;
    if (intervalSpeed == null) {
      intervalSpeed = 1000;
    }
    that = this;
    that.vars.interval = setInterval(function() {
      return document.title = that.vars.originalTitle === document.title ? notification : that.vars.originalTitle;
    }, intervalSpeed);
    return true;
  },
  off: function() {
    clearInterval(this.vars.interval);
    document.title = this.vars.originalTitle;
    return true;
  }
};

$(function() {
  var $alterAction, $alterCard, $confirmAction, $content, $decreaseCredibility, $field, $increaseCredibility, $joinButton, $joinGame, $name, $playGame, $sendButton, $startButton, $startGame, $target, $username, $window, joinGame, logs, parseCLI, performAction, performCardAction, sendActionMessage, sendCredibilityMessage, sendMessage, socket, windowFocus;
  $window = $(window);
  windowFocus = true;
  socket = io.connect(location.origin);
  logs = [];
  $joinGame = $('#join-game');
  $username = $('#username');
  $joinButton = $('#join');
  $startGame = $('#start-game');
  $startButton = $('#start');
  $playGame = $('#play-game');
  $content = $('#content');
  $name = $('#name');
  $field = $('#field');
  $sendButton = $('#send');
  $increaseCredibility = $('.increase-credibility');
  $decreaseCredibility = $('.decrease-credibility');
  $alterAction = $('.alter-action');
  $confirmAction = $('.confirm-action');
  $target = $('#target');
  $alterCard = $('.alter-card');
  $window.on('focus', function(event) {
    windowFocus = true;
    pageTitleNotification.off();
    return true;
  });
  $window.on('blur', function(event) {
    windowFocus = false;
    return true;
  });
  $increaseCredibility.on('click', function(event) {
    alterCredibility(selfIndex, 1);
    return true;
  });
  $decreaseCredibility.on('click', function(event) {
    alterCredibility(selfIndex, -1);
    return true;
  });
  socket.on('message', function(data) {
    var $message, text, username;
    if (data == null) {
      data = {};
    }
    if (data.message) {
      logs.push(data);
      username = data.username ? data.username : 'Server';
      text = data.message;
      $message = $('<div>', {
        "class": 'message'
      });
      $message.append($('<strong>', {
        html: "" + username + ": ",
        "class": 'text-primary'
      }));
      $message.append(text);
      $content.append($message);
      $content.scrollTop($content.prop('scrollHeight'));
      if (data.username && username !== name && !windowFocus) {
        pageTitleNotification.off();
        pageTitleNotification.on("" + username + ": " + (text.stripTags()), 1500);
      }
    } else {
      console.log("There is a problem: " + data);
    }
    return true;
  });
  socket.on('game:start', function(data) {
    var $emptyPanels;
    if (data == null) {
      data = {};
    }
    $emptyPanels = $('.panel-empty');
    $emptyPanels.css('opacity', 0.25);
    $joinGame.collapse('hide');
    $startGame.collapse('hide');
    $playGame.collapse('show');
    $field.trigger('focus');
    return true;
  });
  socket.on('board:update', function(data) {
    var $emptyPanels, $player, $playerCards, $playerCredibility, $playerPanel, $playerTitle, card, cardIndex, player, playerIndex, players, _i, _j, _ref;
    if (data == null) {
      data = {};
    }
    if (data.players) {
      players = data.players;
      if (players.length) {
        for (playerIndex in players) {
          player = players[playerIndex];
          $player = $("#player-" + playerIndex);
          $playerPanel = $player.find('.panel');
          $playerTitle = $player.find('.panel-title');
          $playerCards = [$player.find('.card-0'), $player.find('.card-1')];
          $playerCredibility = $player.find('.credibility');
          if (player.active) {
            $playerPanel.prop('class', 'panel panel-primary');
          } else {
            $playerPanel.prop('class', 'panel panel-default');
          }
          $playerPanel.prop('class', 'panel panel-primary');
          $playerTitle.html(player.name);
          _ref = player.cards;
          for (cardIndex in _ref) {
            card = _ref[cardIndex];
            $playerCards[cardIndex].prop('src', card);
          }
          $playerCredibility.html("" + player.credibility + " Credibility");
          if (selfIndex < 0 && player.name === name) {
            selfIndex = playerIndex;
          }
        }
        if (players.length < 2 && !debug) {
          return $startButton.prop('disabled', true);
        } else {
          return $startButton.prop('disabled', false);
        }
      } else {
        selfIndex = -1;
        for (playerIndex = _i = 0; _i <= 5; playerIndex = ++_i) {
          $player = $("#player-" + playerIndex);
          $playerPanel = $player.find('.panel');
          $playerTitle = $player.find('.panel-title');
          $playerCards = [$player.find('.card-0'), $player.find('.card-1')];
          $playerCredibility = $player.find('.credibility');
          $playerPanel.prop('class', 'panel panel-empty hidden-xs');
          $playerTitle.html("Player " + (playerIndex + 1));
          for (cardIndex = _j = 0; _j <= 1; cardIndex = ++_j) {
            $playerCards[cardIndex].prop('src', '/images/card_blank.png');
          }
          $playerCredibility.html('0 Credibility');
        }
        $startButton.prop('disabled', true);
        $emptyPanels = $('.panel-empty');
        $emptyPanels.css('opacity', 1.0);
        if (!$joinGame.hasClass('in')) {
          $joinGame.collapse('show');
        }
        if ($startGame.hasClass('in')) {
          $startGame.collapse('hide');
        }
        if ($playGame.hasClass('in')) {
          $playGame.collapse('hide');
        }
        return $username.trigger('focus');
      }
    }
  });
  joinGame = function() {
    if ($username.val() === '') {
      alert('Please enter your name!');
    } else {
      name = $username.val().htmlEntities();
      $name.html(name);
      socket.emit('send', {
        message: "<em>" + name + " joined the game</em>"
      });
      socket.emit('game:join', {
        name: name
      });
      $joinGame.collapse('hide');
      $startGame.collapse('show');
    }
    return true;
  };
  $joinButton.on('click', function(event) {
    joinGame();
    return true;
  });
  $username.on('keydown', function(event) {
    if (event.keyCode === 13) {
      joinGame();
    }
    return true;
  });
  $startButton.on('click', function(event) {
    socket.emit('game:start');
    return true;
  });
  sendMessage = function() {
    var text;
    if ($field.val() === '') {
      alert('Please enter a message!');
    } else if ($field.val().startsWith(":")) {
      parseCLI($field.val());
    } else {
      text = $field.val().htmlEntities();
      socket.emit('send', {
        username: name,
        message: text
      });
    }
    $field.val('');
    $field.trigger('focus');
    return true;
  };
  $sendButton.on('click', function(event) {
    sendMessage();
    return true;
  });
  $field.on('keydown', function(event) {
    if (event.keyCode === 13) {
      sendMessage();
    }
    return true;
  });
  sendCredibilityMessage = function() {
    var credibilityText;
    credibilityText = $("#player-" + selfIndex + " .credibility").text();
    sendActionMessage("has <strong class=\"text-success\">" + credibilityText + "</strong>");
    return true;
  };
  sendActionMessage = function(text, target) {
    if (target == null) {
      target = false;
    }
    socket.emit('send', {
      username: name,
      message: "<em>" + text + "</em>"
    });
    $('#actionsModal').modal('hide');
    return true;
  };
  parseCLI = function(commandString) {
    var block, blocks, cardIndex, cardPosition, commands, _i, _len;
    commandString = $.trim(commandString.replace(/:/g, ' '));
    blocks = commandString.split('|');
    for (_i = 0, _len = blocks.length; _i < _len; _i++) {
      block = blocks[_i];
      commands = $.trim(block).split(' ');
      commands = $.grep(commands, function(n) {
        return n;
      });
      if (commands.length > 0) {
        switch (commands[0]) {
          case 'paycheck':
          case 'income':
            performAction('paycheck');
            alterCredibility(selfIndex, 1);
            break;
          case 'bonus':
          case 'foreign_aid':
            performAction('bonus');
            alterCredibility(selfIndex, 2);
            break;
          case 'downsize':
          case 'coup':
            if (commands.length > 1) {
              $target.val(commands[1]);
              performAction('downsize');
              alterCredibility(selfIndex, -7);
            }
            break;
          case 'cfo':
          case 'dividends':
          case 'tax':
            performAction('dividends');
            alterCredibility(selfIndex, 3);
            break;
          case 'block':
          case 'counter':
            if (commands.length > 2) {
              $target.val(commands[2]);
              switch (commands[1]) {
                case 'cfo':
                case 'bonus':
                case 'foreign_aid':
                  performAction('block_bonus');
                  break;
                case '1up':
                case 'one_upper':
                case 'steal1up':
                case 'steal_1up':
                case 'steal_one_upper':
                  performAction('block_steal_one_upper');
                  break;
                case 'vp':
                case 'stealvp':
                case 'steal_vp':
                  performAction('block_steal_vp');
                  break;
                case 'hr':
                case 'fire':
                  performAction('block_fire');
              }
            }
            break;
          case '1up':
          case 'one_upper':
          case 'steal':
            if (commands.length > 1) {
              $target.val(commands[1]);
              performAction('steal');
              alterCredibility(selfIndex, 2);
            }
            break;
          case 'vp':
          case 'exchange':
            performAction('exchange');
            break;
          case 'man':
          case 'manager':
          case 'fire':
            if (commands.length > 1) {
              $target.val(commands[1]);
              performAction('fire');
              alterCredibility(selfIndex, -3);
            }
            break;
          case 'call':
          case 'bs':
          case 'call_bluff':
            if (commands.length > 1) {
              $target.val(commands[1]);
              performAction('call_bluff');
            }
            break;
          case 'card':
            if (commands.length > 1) {
              cardPosition = false;
              cardIndex = commands[1];
            }
            if (commands.length > 2) {
              cardPosition = parseInt(commands[1] - 1, 10);
              cardIndex = commands[2];
            }
            switch (cardIndex) {
              case 'down':
                cardIndex = 'face_down';
                break;
              case '1up':
                cardIndex = 'one_upper';
                break;
              case 'man':
                cardIndex = 'manager';
            }
            if (cardIndex != null) {
              performCardAction(cardIndex, cardPosition);
            }
            break;
          case 'cred':
          case 'credibility':
            if (commands.length === 1) {
              sendCredibilityMessage();
            } else {
              alterCredibility(selfIndex, parseInt(commands[1]), 10);
            }
            break;
          case 'bluff':
          case 'bluffed':
            if (commands.length > 1) {
              switch (commands[1]) {
                case 'cfo':
                  performAction('bluffed_cfo');
                  break;
                case '1up':
                  performAction('bluffed_one_upper');
                  break;
                case 'vp':
                  performAction('bluffed_vp');
                  break;
                case 'man':
                  performAction('bluffed_manager');
                  break;
                case 'hr':
                  performAction('bluffed_hr');
              }
            }
            break;
          case 'resign':
          case 'quit':
          case 'lost':
          case 'out':
            performAction('resign');
            break;
          case 'takeover':
          case 'hostile_takeover':
          case 'won':
            performAction('hostile_takeover');
        }
      }
    }
    return true;
  };
  performAction = function(action) {
    var targetText, text;
    $target.collapse('hide');
    text = actions[action].text;
    if (actions[action].target) {
      $target.trigger('focus');
      if ($target.val() !== '') {
        targetText = $target.val();
        text += " <strong class=\"text-primary\">" + targetText + "</strong>";
        $target.val('');
        currentAction = false;
      } else {
        currentAction = action;
        $target.collapse('show');
        $target.on('shown.bs.collapse', function(event) {
          return $target.trigger('focus');
        });
        return false;
      }
    }
    if (actions[action].credibility) {
      sendCredibilityMessage();
    }
    return sendActionMessage(text);
  };
  $alterAction.on('click', function(event) {
    var $modal, $that, action, actionName, show, text;
    show = false;
    $that = $(this);
    $modal = $('#confirmAction');
    actionName = $that.attr('data-action');
    action = actions[actionName];
    if (action.target) {
      if ($that.hasClass('players')) {
        if ($that.attr('data-action')) {
          $('.players').removeAttr('data-action');
          $target.val($that.find('.panel-title').html());
          show = true;
        }
      } else {
        $('.players').attr('data-action', actionName);
        $('.alert').alert();
      }
    } else {
      show = true;
    }
    if (show) {
      text = 'Would you like to take the action ' + action.title;
      if (action.target) {
        text += ' against ' + $target.val();
      }
      text += '?';
      $modal.find('.modal-body').text(text);
      $modal.find('.confirm-action').attr('data-action', actionName);
      $('#confirmAction').modal('show');
    }
    return true;
  });
  $confirmAction.on('click', function(event) {
    var $that, action;
    event.preventDefault();
    $that = $(this);
    action = $that.attr('data-action');
    $('.players').removeAttr('data-action');
    if ($that.hasClass('players') && $that.attr('data-action')) {
      $target.val($that.find('.panel-title').html());
    }
    if (action) {
      performAction(action);
    }
    return true;
  });
  $target.on('keydown', function(event) {
    if (event.keyCode === 13 && currentAction) {
      $("[data-action=" + currentAction + "]").trigger('click');
    }
    return true;
  });
  performCardAction = function(cardIndex, cardPosition) {
    if (cardPosition == null) {
      cardPosition = false;
    }
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      cardPosition: cardPosition
    });
  };
  $alterCard.on('click', function(event) {
    var $that, cardIndex, cardPosition;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    cardPosition = $that.data('card-position');
    performCardAction(cardIndex, cardPosition);
    return $('#actionsModal').modal('hide');
  });
  $('[data-toggle=tooltip]').tooltip();
  socket.emit('game:reset');
});

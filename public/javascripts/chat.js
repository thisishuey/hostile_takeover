// Generated by CoffeeScript 1.7.1
var htmlEntities, name, pageTitleNotification, selfIndex;

name = '';

selfIndex = -1;

htmlEntities = function(string) {
  return String(string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
};

pageTitleNotification = {
  vars: {
    originalTitle: document.title,
    interval: null
  },
  on: function(notification, intervalSpeed) {
    var that;
    if (intervalSpeed == null) {
      intervalSpeed = 1000;
    }
    that = this;
    that.vars.interval = setInterval(function() {
      return document.title = that.vars.originalTitle === document.title ? notification : that.vars.originalTitle;
    }, intervalSpeed);
    return true;
  },
  off: function() {
    clearInterval(this.vars.interval);
    document.title = this.vars.originalTitle;
    return true;
  }
};

$(function() {
  var $alterCardBlank, $alterCardCFO, $alterCardFaceDown, $alterCardHR, $alterCardManager, $alterCardOneUpper, $alterCardVP, $content, $field, $gainCredButton, $joinButton, $joinGame, $loseCredButton, $name, $playGame, $sendButton, $startButton, $startGame, $username, $window, joinGame, logs, sendMessage, socket, windowFocus;
  $window = $(window);
  windowFocus = true;
  socket = io.connect(window.location.origin);
  logs = [];
  $joinGame = $('#join-game');
  $username = $('#username');
  $joinButton = $('#join');
  $startGame = $('#start-game');
  $startButton = $('#start');
  $playGame = $('#play-game');
  $content = $('#content');
  $name = $('#name');
  $field = $('#field');
  $sendButton = $('#send');
  $gainCredButton = $('#gainCredibility');
  $loseCredButton = $('#loseCredibility');
  $alterCardBlank = $('.alter-card-blank');
  $alterCardFaceDown = $('.alter-card-face-down');
  $alterCardCFO = $('.alter-card-cfo');
  $alterCardOneUpper = $('.alter-card-one-upper');
  $alterCardVP = $('.alter-card-vp');
  $alterCardManager = $('.alter-card-manager');
  $alterCardHR = $('.alter-card-hr');
  $window.on('focus', function(event) {
    windowFocus = true;
    pageTitleNotification.off();
    return true;
  });
  $window.on('blur', function(event) {
    windowFocus = false;
    return true;
  });
  $gainCredButton.on('click', function(event) {
    increaseCredibility(selfIndex, 1);
    return true;
  });
  $loseCredButton.on('click', function(event) {
    decreaseCredibility(selfIndex, 1);
    return true;
  });
  socket.on('message', function(data) {
    var $message, text, username;
    if (data == null) {
      data = {};
    }
    if (data.message) {
      logs.push(data);
      username = data.username ? data.username : 'Server';
      text = data.message;
      $message = $('<div>', {
        "class": 'message'
      });
      $message.append($('<strong>', {
        html: "" + username + ": "
      }));
      $message.append(text);
      $content.append($message);
      $content.scrollTop($content.prop('scrollHeight'));
      if (data.username && username !== name && !windowFocus) {
        pageTitleNotification.off();
        pageTitleNotification.on("" + username + " says " + text, 1500);
      }
    } else {
      console.log("There is a problem: " + data);
    }
    return true;
  });
  socket.on('game:start', function(data) {
    var $emptyPanels;
    if (data == null) {
      data = {};
    }
    $emptyPanels = $('.panel-empty');
    $emptyPanels.css('opacity', 0.25);
    $joinGame.collapse('hide');
    $startGame.collapse('hide');
    $playGame.collapse('show');
    $field.trigger('focus');
    return true;
  });
  socket.on('board:update', function(data) {
    var $emptyPanels, $player, $playerCards, $playerCredibility, $playerPanel, $playerTitle, card, cardIndex, player, playerIndex, players, _i, _j, _ref;
    if (data == null) {
      data = {};
    }
    if (data.players) {
      players = data.players;
      if (players.length) {
        for (playerIndex in players) {
          player = players[playerIndex];
          if (selfIndex < 0 && player.name === name) {
            selfIndex = playerIndex;
          }
          $player = $("#player-" + playerIndex);
          $playerPanel = $player.find('.panel');
          $playerTitle = $player.find('.panel-title');
          $playerCards = [$player.find('.card-0'), $player.find('.card-1')];
          $playerCredibility = $player.find('.credibility');
          if (player.active) {
            $playerPanel.prop('class', 'panel panel-primary');
          } else {
            $playerPanel.prop('class', 'panel panel-default');
          }
          $playerPanel.prop('class', 'panel panel-primary');
          $playerTitle.html(player.name);
          _ref = player.cards;
          for (cardIndex in _ref) {
            card = _ref[cardIndex];
            $playerCards[cardIndex].prop('src', card);
          }
          $playerCredibility.html("" + player.credibility + " Credibility");
        }
        if (players.length < 2) {
          return $startButton.prop('disabled', true);
        } else {
          return $startButton.prop('disabled', false);
        }
      } else {
        for (playerIndex = _i = 0; _i <= 5; playerIndex = ++_i) {
          $player = $("#player-" + playerIndex);
          $playerPanel = $player.find('.panel');
          $playerTitle = $player.find('.panel-title');
          $playerCards = [$player.find('.card-0'), $player.find('.card-1')];
          $playerCredibility = $player.find('.credibility');
          $playerPanel.prop('class', 'panel panel-empty');
          $playerTitle.html("Player " + (playerIndex + 1));
          for (cardIndex = _j = 0; _j <= 1; cardIndex = ++_j) {
            $playerCards[cardIndex].prop('src', '/images/card_blank.png');
          }
          $playerCredibility.html('0 Credibility');
        }
        $startButton.prop('disabled', true);
        $emptyPanels = $('.panel-empty');
        $emptyPanels.css('opacity', 1.0);
        if (!$joinGame.hasClass('in')) {
          $joinGame.collapse('show');
        }
        if ($startGame.hasClass('in')) {
          $startGame.collapse('hide');
        }
        if ($playGame.hasClass('in')) {
          $playGame.collapse('hide');
        }
        return $username.trigger('focus');
      }
    }
  });
  joinGame = function() {
    if ($username.val() === '') {
      alert('Please enter your name!');
    } else {
      name = htmlEntities($username.val());
      $name.html(name);
      socket.emit('send', {
        message: "<em>" + name + " joined the game</em>"
      });
      socket.emit('game:join', {
        name: name
      });
      $joinGame.collapse('hide');
      $startGame.collapse('show');
    }
    return true;
  };
  $joinButton.on('click', function(event) {
    joinGame();
    return true;
  });
  $username.on('keydown', function(event) {
    if (event.keyCode === 13) {
      joinGame();
    }
    return true;
  });
  $startButton.on('click', function(event) {
    socket.emit('game:start');
    return true;
  });
  sendMessage = function() {
    var text;
    if ($field.val() === '') {
      alert('Please enter a message!');
    } else {
      text = htmlEntities($field.val());
      socket.emit('send', {
        username: name,
        message: text
      });
      $field.val('');
      $field.trigger('focus');
    }
    return true;
  };
  $sendButton.on('click', function(event) {
    sendMessage();
    return true;
  });
  $field.on('keydown', function(event) {
    if (event.keyCode === 13) {
      sendMessage();
    }
    return true;
  });
  $alterCardBlank.on('click', function(event) {
    var $that, cardIndex;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      src: '/images/card_blank.png'
    });
  });
  $alterCardFaceDown.on('click', function(event) {
    var $that, cardIndex;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      src: '/images/card_face_down.png'
    });
  });
  $alterCardCFO.on('click', function(event) {
    var $that, cardIndex;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      src: '/images/card_cfo.png'
    });
  });
  $alterCardOneUpper.on('click', function(event) {
    var $that, cardIndex;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      src: '/images/card_one_upper.png'
    });
  });
  $alterCardVP.on('click', function(event) {
    var $that, cardIndex;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      src: '/images/card_vp.png'
    });
  });
  $alterCardManager.on('click', function(event) {
    var $that, cardIndex;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      src: '/images/card_manager.png'
    });
  });
  $alterCardHR.on('click', function(event) {
    var $that, cardIndex;
    event.preventDefault();
    $that = $(this);
    cardIndex = $that.data('card-index');
    return socket.emit('game:alterCard', {
      playerIndex: selfIndex,
      cardIndex: cardIndex,
      src: '/images/card_hr.png'
    });
  });
  socket.emit('game:reset');
});

// Generated by CoffeeScript 1.7.1
var activeID, app, cardPositions, cards, express, io, players, port, updateBoard;

express = require('express');

app = express();

port = 4839;

players = [];

activeID = 0;

cardPositions = ['first card', 'second card'];

cards = {
  blank: {
    title: 'Blank',
    source: '/images/card_blank.png'
  },
  face_down: {
    title: 'Face Down',
    source: '/images/card_face_down.png'
  },
  cfo: {
    title: 'CFO',
    source: '/images/card_cfo.png'
  },
  one_upper: {
    title: 'One-Upper',
    source: '/images/card_one_upper.png'
  },
  vp: {
    title: 'VP',
    source: '/images/card_vp.png'
  },
  manager: {
    title: 'Manager',
    source: '/images/card_manager.png'
  },
  hr: {
    title: 'HR',
    source: '/images/card_hr.png'
  }
};

app.set('views', "" + __dirname + "/tpl");

app.set('view engine', 'html');

app.engine('html', require('ejs').__express);

app.get('/', function(request, respond) {
  return respond.render('page');
});

app.use(express["static"]("" + __dirname + "/public"));

io = require('socket.io').listen(app.listen(port));

io.sockets.on('connection', function(socket) {
  socket.emit('message', {
    message: 'Welcome to <strong class=\"text-primary\">Hostile Takeover</strong>!'
  });
  socket.on('send', function(data) {
    if (data == null) {
      data = {};
    }
    return io.sockets.emit('message', data);
  });
  socket.on('game:reset', function(data) {
    if (data == null) {
      data = {};
    }
    players = [];
    return updateBoard();
  });
  socket.on('game:join', function(data) {
    var name, player;
    if (data == null) {
      data = {};
    }
    if (data.name) {
      name = data.name;
      player = {
        name: name,
        cards: [cards.face_down.source, cards.face_down.source],
        credibility: 2,
        active: players.length < 1
      };
      players.push(player);
      return updateBoard();
    }
  });
  socket.on('game:start', function(data) {
    if (data == null) {
      data = {};
    }
    io.sockets.emit('game:start', data);
    return updateBoard();
  });
  socket.on('game:alterCard', function(data) {
    var card, cardPosition, player;
    if (data == null) {
      data = {};
    }
    if (data.playerIndex !== null && data.cardIndex !== null) {
      player = players[data.playerIndex];
      card = cards[data.cardIndex];
      cardPosition = 0;
      if (data.cardPosition !== false) {
        console.log(data.cardPosition);
        cardPosition = data.cardPosition;
      } else if (player.cards[cardPosition] !== cards.face_down.source) {
        cardPosition = 1;
      }
      player.cards[cardPosition] = card.source;
      io.sockets.emit('message', {
        username: player.name,
        message: "<em>changed " + cardPositions[cardPosition] + " to <strong class=\"text-success\">" + card.title + "</strong></em>"
      });
      return updateBoard();
    }
  });
  socket.on('game:action', function(data) {
    if (data == null) {
      data = {};
    }
    if (data.playerIndex !== null) {
      return updateBoard();
    }
  });
  socket.on('game:counterAction', function(data) {
    if (data == null) {
      data = {};
    }
    if (data.playerIndex !== null) {
      return updateBoard();
    }
  });
  socket.on('game:alterCredibility', function(data) {
    if (data == null) {
      data = {};
    }
    if (data.playerIndex !== null && data.amount !== null) {
      if (data.amount >= 0 || data.amount * -1 <= players[data.playerIndex].credibility) {
        players[data.playerIndex].credibility += data.amount;
      }
      updateBoard();
    }
    return true;
  });
  return true;
});

updateBoard = function() {
  io.sockets.emit('board:update', {
    players: players
  });
  return true;
};

console.log("Listening on port " + port);
